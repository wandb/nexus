[tox]
minversion = 3.24.0
envlist = black-check,isort-check,flake8,mypy

[testenv:py{36,37,38,39}]
deps =
    pytest
    pytest-cov
setenv =
    COVERAGE_FILE={envdir}/.coverage
commands =
    python -m pytest --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {posargs:tests/}

[testenv:flake8]
basepython = python3
skip_install = true
deps =
    flake8
    flake8-colors
    flake8-bugbear
    pep8-naming
    flake8-fixme
    flake8-typing-imports
    flake8-import-order
commands =
    flake8 {posargs:wandb_nexus/ setup.py}

[testenv:mypy]
basepython = python3
skip_install = true
deps =
    mypy==0.991
    lxml
setenv =
    MYPYPATH = {toxinidir}
commands =
    mypy --install-types --non-interactive --show-error-codes --html-report mypy-results/ wandb_nexus/

[flake8]
max-line-length = 120
min_python_version = 3.6.0
ignore =
    # TODO()'s are allowed for now
    T101,
    # black formatting is inconsistent with flake8
    E203,
exclude =
    src/yea/vendor/

[black]
paths = wandb_nexus/ setup.py
deps = black

[testenv:black-format]
deps = {[black]deps}
basepython = python3
skip_install = true
commands =
    black {[black]paths}

[testenv:black-check]
deps = {[black]deps}
basepython = python3
skip_install = true
commands =
    black --check {[black]paths}

[testenv:black-diff]
basepython = python3
skip_install = true
deps = {[black]deps}
commands =
    black --diff {[black]paths}

[isort]
profile = black

[isort-base]
args = -o yea -p yaml
paths = wandb_nexus/ setup.py

[testenv:isort-check]
deps = isort
basepython = python3
skip_install = true
commands =
    isort {[isort-base]args} --check {posargs:{[isort-base]paths}}

[testenv:isort-format]
deps = isort
basepython = python3
skip_install = true
commands =
    isort {[isort-base]args} {posargs:{[isort-base]paths}}

[testenv:isort-diff]
deps = isort
basepython = python3
skip_install = true
commands =
    isort {[isort-base]args} --check --diff {posargs:{[isort-base]paths}}

[testenv:cover]
skip_install = true
basepython = python3
deps =
    pytest
    coverage
    codecov
whitelist_externals =
    mkdir
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered

[testenv:covercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
whitelist_externals =
    mkdir
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered
    codecov -e TOXENV -F unittest

[testenv:release]
skip_install = true
basepython = python3
deps =
    twine
    wheel
    setuptools
whitelist_externals =
    make
commands =
    make release-tox
